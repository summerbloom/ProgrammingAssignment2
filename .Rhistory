a <- 20
outer_func()
ls()
print(a)
rm(list=ls())
ls()
q()
ls()
makecachematrix <- function(x = matrix()) {
x <- NULL
inv <- NULL
list(
set = function(y) {
x <<- y
inv <<- NULL
}
get = function() x
setinverse = function(invers) inv <<- invers
getinverse = function() inv
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
makecachematrix <- function(x = matrix()) {
x <- NULL
inv <- NULL
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function() inv
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
my_matrix <- makecachematrix(matrix(1:4, 2, 2))
my_matrix$get()
cachesolve(my_matrix)
length(my_matrix)
x
inv
x()
inv()
get()
my_matrix()
my_matrix
my_matrixx$get()
my_matrix$get()
makecachematrix <- function(x = matrix()) {
inv <- NULL
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function() inv
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
my_matrix$get()
length(my_matrix)
my_matrix
get()
dim(my_matrix)
makecachematrix <- function(x = matrix()) {
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function() inv
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
dim(my_matrix)
rm(list = ls())
ls()
makecachematrix <- function(x = matrix()) {
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function() inv
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
my_matrix <- makecachematrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
makecachematrix <- function(x = matrix()) {
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function() invers
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
my_matrix$getinverse()
makecachematrix <- function(x = matrix()) {
inv <- NULL
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function() inv
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
makecachematrix <- function(x = matrix()) {
inv <- NULL
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function()
return(inv)
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
my_matrix$getinverse()
inv
rm(list= ls())
makecachematrix <- function(x = matrix()) {
inv <- NULL
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function()
return(inv)
)
}
cachesolve <- function(x, ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
my_matrix <- makecachematrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
rm(list= ls())
makecachematrix <- function(x = matrix()) {
inv <- NULL
list(
set = function(y) {
x <<- y
inv <<- NULL
},
get = function() x,
setinverse = function(invers) inv <<- invers,
getinverse = function()
return(inv)
)
}
cachesolve <- function(x= matrix(), ...) {
y <- x$get()
if (y != x) {
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
else inv <- x$getinverse()
message("getting cache data")
return(inv)
}
my_matrix <- makecachematrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- functeion() x
setinverse <- function(inverse) inv <<- invers
getinverse <- function() inv
list(set = set,
get = get, getinverse
sertinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x, ...) {
inv <- X$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinverse(inv)
inv
}
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- invers
getinverse <- function() inv
list(set = set,
get = get, getinverse
setinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x, ...) {
inv <- X$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinverse(inv)
inv
}
my_matrix <- makecachematrix(matrix(1:4, 2, 2))
my_matrix <- makecachematrix(1:4, 2, 2)
rm(list= ls())
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- invers
getinverse <- function() inv
list(set = set,
get = get, getinverse
setinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x, ...) {
inv <- X$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinverse(inv)
inv
}
rm(list= ls())
L
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- invers
getinverse <- function() inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x, ...) {
inv <- X$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinverse(inv)
inv
}
my_matrix <- makecachematrix(1:4, 2, 2)
my_matrix <- makecachematrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
rm(list = ls())
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x, ...) {
inv <- X$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinverse(inv)
inv
}
my_matrix <- makecachematrix(matrix(1:4, 2, 2::))
my_matrix <- makecachematrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
rm(list= ls())
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x) {
inv <- X$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat)
x$setinverse(inv)
inv
}
ls()
makecachematrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function()x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x) {
inv <- x$getinverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat)
x$setinverse(inv)
inv
}
my_matrix <- makecachematrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
my_matrix$set(matrix(5:8, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cachesolve(my_matrix)
my_matrix$getinverse()
my_matrix$setinverse(matrix(c(-2, 1, 1.5, -0.5), 2, 2))
my_matrix$getinverse()
class(setinverse)
typeof(setinverse)
typeof(my_matrix$setinverse)
class(my_matrix$setinverse)
str(my_matrix$setinverse)
ls()
rm(list= ls())
ls()
add_x <- function(x) {
function(y) { x + y }
}
add_2(1:10)
add_2 <- add_x(2)
add_7 <- add_x(7)
add_2(1:10)
y
print("y")
print(y)
return(y)
str(y)
str(add_x$y)
str(add_2$y)
add_2(1:10)
add_7(1:10)
setwd("C:/Users/Light/ProgrammingAssignment2")
ls()
dir()
load("C:/Users/Light/ProgrammingAssignment2/cachematrix.R")
